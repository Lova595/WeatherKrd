import telebot
from random import choice, shuffle
from config import TOKEN
from other import *
import parser_weather
from datetime import datetime

bot = telebot.TeleBot(TOKEN)

all_cities = {'–Ø–∫—É—Ç—Å–∫': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-—è–∫—É—Ç—Å–∫',
              '–ú–∞–≥–∞–¥–∞–Ω': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-–º–∞–≥–∞–¥–∞–Ω',

              '–ê—Ñ–∏–Ω—ã': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-–∞—Ñ–∏–Ω—ã',
              '–ù—å—é-–ô–æ—Ä–∫': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-–Ω—å—é-–π–æ—Ä–∫',
              '–ú–æ—Å–∫–≤–∞': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-–º–æ—Å–∫–≤–∞',
              '–†–∏–º': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-—Ä–∏–º',
              '–ö–∞–∏—Ä': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-–∫–∞–∏—Ä',
              '–ü–µ–∫–∏–Ω': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-–ø–µ–∫–∏–Ω',
              '–¢–æ–∫–∏–æ': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-—Ç–æ–∫–∏–æ',
              '–í–µ–ª–∏–∫–∏–π-–£—Å—Ç—é–≥': 'https://sinoptik.ua/–ø–æ–≥–æ–¥–∞-–≤–µ–ª–∏–∫–∏–π-—É—Å—Ç—é–≥'
              }
database = {}


@bot.message_handler(commands=['start'])
def welcome_bot(message):
    with open('items/–ø–æ–≥–æ–¥–∞.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo, f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!')
    bot.send_message(message.chat.id, '–Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞ –æ–∫–Ω–æ–º –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫—É—é –æ–¥–µ–∂–¥—É –ª—É—á—à–µ '
                                      '–Ω–∞–¥–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –ø–æ –ø–æ–≥–æ–¥–µ. –ï—â–µ –º—ã –º–æ–∂–µ–º —Å—ã–≥—Ä–∞—Ç—å —Å —Ç–æ–±–æ–π –≤ –∏–≥—Ä—É '
                                      '–ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å! '
                                      '–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=create_main_bottom())


@bot.message_handler(content_types=['text'])
def manager_commands(message):
    if message.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –¥–∞—Ç—É:', reply_markup=create_weather_bottom())

    elif message.text.split()[0] == '–°–µ–≥–æ–¥–Ω—è':
        content, temp, description, folk = parser_weather.start('today')
        text = ''
        photo_path = ''
        for i in content[0].items():
            text += f'{i[1]}\n'
            if i[0] == 'description':
                i = i[1].lower().replace("\n", " ").strip()
                time = datetime.now().strftime('%H')
                if int(time) < 18:
                    photo_path = f'items/day/{i}.png'
                else:
                    photo_path = f'items/night/{i}.png'
        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, reply_markup=create_details_bottom_today())
        bot.send_message(message.chat.id, text, reply_markup=create_interval_bottom())

    elif message.text == '–ó–∞–≤—Ç—Ä–∞':
        content, temp, description, folk = parser_weather.start('tomorrow')
        text = ''
        photo_path = ''
        for i in content[1].items():
            text += f'{i[1]}\n'
            if i[0] == 'description':
                i = i[1].lower().replace("\n", " ").strip()
                time = datetime.now().strftime('%H')
                if int(time) < 18:
                    photo_path = f'items/day/{i}.png'
                else:
                    photo_path = f'items/night/{i}.png'
        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, reply_markup=create_details_bottom_tomorrow())
        bot.send_message(message.chat.id, text, reply_markup=create_interval_bottom())

    elif message.text == '–ù–∞ –Ω–µ–¥–µ–ª—é':
        content, temp, description, folk = parser_weather.start('today')
        for i in content:
            text = ''
            for y in i.items():
                text += f'{y[1]}\n'
            bot.send_message(message.chat.id, text)

    elif message.text == '–ù–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ':
        content, temp, description, folk = parser_weather.start('today')
        count = 0
        for i in content:
            for k, v in i.items():
                text = ''
                if (v.lower().endswith('–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ') or v.lower().endswith('—Å—É–±–±–æ—Ç–∞')) and count < 2:
                    for y in i.values():
                        text += f'{y}\n'
                    count += 1
                    bot.send_message(message.chat.id, text)

    elif message.text == '–ù–∞—Ä–æ–¥–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å üå§':
        content, temp, description, folk = parser_weather.start('today')
        bot.send_message(message.chat.id, folk)

    elif message.text == '–ù–∞—Ä–æ–¥–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚õÖ':
        content, temp, description, folk = parser_weather.start('tomorrow')
        bot.send_message(message.chat.id, folk)

    elif message.text == '–ò–≥—Ä–∞—Ç—å':
        bot_choice = choice(list(all_cities))
        database[message.chat.id] = bot_choice
        answer = bot.send_message(message.chat.id, f'–£–≥–∞–¥–∞–π –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ *{bot_choice}*? '
                                                   f'–£–∫–∞–∂–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è:',
                                  reply_markup=create_play_bottom(), parse_mode='MARKDOWN')
        bot.register_next_step_handler(answer, check_user_answer)

    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(message.chat.id,
                         '–Ø —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞ –æ–∫–Ω–æ–º –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫—É—é –æ–¥–µ–∂–¥—É –ª—É—á—à–µ '
                         '–Ω–∞–¥–µ—Ç—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –ø–æ –ø–æ–≥–æ–¥–µ. –ï—â–µ –º—ã –º–æ–∂–µ–º —Å—ã–≥—Ä–∞—Ç—å —Å —Ç–æ–±–æ–π –≤ –∏–≥—Ä—É '
                         '–ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å! '
                         '–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=create_main_bottom())

    elif message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –¥–∞—Ç—É:', reply_markup=create_weather_bottom())


@bot.callback_query_handler(func=lambda call: True)
def manager_inline_commands(call):
    if call.data == 'night':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=show_weather_time(0, 2, '–ù–æ—á—å —Å 0:00 –¥–æ 3:00'),
                              reply_markup=create_back_bottom(call.data))

    elif call.data == 'morning':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=show_weather_time(2, 4, '–£—Ç—Ä–æ —Å 6:00 –¥–æ 9:00'),
                              reply_markup=create_back_bottom(call.data))

    elif call.data == 'day':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=show_weather_time(4, 6, '–î–µ–Ω—å —Å 12:00 –¥–æ 15:00'),
                              reply_markup=create_back_bottom(call.data))

    elif call.data == 'evening':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=show_weather_time(6, 8, '–í–µ—á–µ—Ä —Å 18:00 –¥–æ 21:00'),
                              reply_markup=create_back_bottom(call.data))

    elif call.data.split()[0] == 'back':
        content, temp, description, folk = parser_weather.start('today')
        text = ''
        for i in content[0].items():
            text += f'{i[1]}\n'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=text,
                              reply_markup=create_interval_bottom())


def check_user_answer(message):
    try:
        user_choice = int(message.text)
        real_temp = parser_weather.game_guess_temp(all_cities[database[message.chat.id]])
        if real_temp == user_choice:
            bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏! –í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–∞ –ª–æ–≤–∏—Ç–µ —Ñ—Ä–∞–∑—É –¥–Ω—è:\n'
                                              f'*{parser_weather.get_phrase_day()}*', parse_mode='MARKDOWN')
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏!')
        del database[message.chat.id]
    except:
        print('–æ—à–∏–±–∫–∞')
        del database[message.chat.id]



if __name__ == '__main__':
    print('–ë–æ—Ç –≤ —Å–µ—Ç–∏')
    bot.polling(non_stop=True)
