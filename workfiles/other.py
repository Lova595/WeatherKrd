from telebot import types
import parser_weather


def create_main_bottom():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    touch_weather = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
    touch_play = types.KeyboardButton('–ò–≥—Ä–∞—Ç—å')
    markup.add(touch_weather, touch_play)
    return markup


def create_weather_bottom():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    touch_today = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
    touch_tomorrow = types.KeyboardButton('–ó–∞–≤—Ç—Ä–∞')
    touch_week = types.KeyboardButton('–ù–∞ –Ω–µ–¥–µ–ª—é')
    touch_day_off = types.KeyboardButton('–ù–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ')
    touch_on_main = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(touch_today, touch_tomorrow, touch_week, touch_day_off, touch_on_main)
    return markup


def create_interval_bottom():
    inline_markup = types.InlineKeyboardMarkup(row_width=True)  # row_width —Å True –ø–æ –æ–¥–Ω–æ–π –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    touch_night = types.InlineKeyboardButton('–ù–æ—á—å üåÉ', callback_data='night')
    touch_morning = types.InlineKeyboardButton('–£—Ç—Ä–æ üåÖ', callback_data='morning')
    touch_day = types.InlineKeyboardButton('–î–µ–Ω—å üèô', callback_data='day')
    touch_evening = types.InlineKeyboardButton('–í–µ—á–µ—Ä üåÜ', callback_data='evening')
    inline_markup.add(touch_night, touch_morning, touch_day, touch_evening)
    return inline_markup


def create_back_bottom(x):
    inline_markup = types.InlineKeyboardMarkup(row_width=True)
    touch_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'back {x}')
    inline_markup.add(touch_back)
    return inline_markup


def create_details_bottom_today():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    touch_recommendation = types.KeyboardButton('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')
    touch_calendar = types.KeyboardButton('–ù–∞—Ä–æ–¥–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å üå§')
    touch_back_menu = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    touch_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(touch_calendar)
    markup.add(touch_recommendation, touch_back_menu, touch_back)
    return markup


def create_details_bottom_tomorrow():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    touch_recommendation = types.KeyboardButton('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')
    touch_calendar = types.KeyboardButton('–ù–∞—Ä–æ–¥–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚õÖ')
    touch_back_menu = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    touch_back = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(touch_calendar)
    markup.add(touch_recommendation, touch_back_menu, touch_back)
    return markup


def create_play_bottom():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    touch_back = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    markup.add(touch_back)
    return markup


def show_weather_time(x: int, z: int, t: str):
    content, temp, description, folk = parser_weather.start('today')
    text = f'{t}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C: '
    flag = True
    for i in temp:
        i = i.split('¬∞')
        for y in i[x:z]:
            text += f' {y}'
        if flag:
            text += '\n–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫: '
            flag = False
    return text
